/**
 * weather.gov API
 * weather.gov API
 *
 * OpenAPI spec version: 1.8.5
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "../src/api";
import {
  AreaCode,
  NWSForecastOfficeId,
  PointString,
  StateTerritoryCode,
} from "../src/api";
import { Configuration } from "../src/configuration";

const config: Configuration = {};

const timestampRegex = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\+|-)\d{2}:\d{2}/;
const ISO8601IntervalISO8601IntervalRegex =
  /(^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(Z|[+-]\d{2}:?\d{2}?)|NOW)\/(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(Z|[+-]\d{2}:?\d{2}?)|NOW)$)|(^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(Z|[+-]\d{2}:?\d{2}?)|NOW)\/P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$)|(^P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?\/(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(Z|[+-]\d{2}:?\d{2}?)|NOW)$)/;

describe("DefaultApi", () => {
  let instance: api.DefaultApi;
  beforeEach(function () {
    instance = new api.DefaultApi(config);
  });

  // test("alertsActive", () => {
  //   const status: Array<string> = undefined;
  //   const messageType: Array<string> = undefined;
  //   const event: Array<string> = undefined;
  //   const code: Array<string> = undefined;
  //   const area: Array<api.AreaCode> = undefined;
  //   const point: PointString = undefined;
  //   const region: Array<MarineRegionCode> = undefined;
  //   const regionType: string = "regionType_example";
  //   const zone: Array<NWSZoneID> = undefined;
  //   const urgency: Array<AlertUrgency> = undefined;
  //   const severity: Array<AlertSeverity> = undefined;
  //   const certainty: Array<AlertCertainty> = undefined;
  //   const limit: number = 56;
  //   return expect(
  //     instance.alertsActive(
  //       status,
  //       messageType,
  //       event,
  //       code,
  //       area,
  //       point,
  //       region,
  //       regionType,
  //       zone,
  //       urgency,
  //       severity,
  //       certainty,
  //       limit,
  //       {}
  //     )
  //   ).resolves.toStrictEqual(null);
  // });
  test("alertsActiveArea", () => {
    const area: AreaCode = StateTerritoryCode.AL;
    return expect(instance.alertsActiveArea(area, {})).resolves.toStrictEqual({
      "@context": { "@version": "1.1" },
      features: expect.any(Array),
      title: "current watches, warnings, and advisories for Alabama",
      type: "FeatureCollection",
      updated: expect.stringMatching(timestampRegex),
    });
  });
  // test("alertsActiveCount", () => {
  //   return expect(instance.alertsActiveCount({})).resolves.toStrictEqual(null)
  // })
  // test("alertsActiveRegion", () => {
  //   const region: MarineRegionCode = undefined
  //   return expect(instance.alertsActiveRegion(region, {})).resolves.toStrictEqual(null)
  // })
  // test("alertsActiveZone", () => {
  //   const zoneId: NWSZoneID = undefined
  //   return expect(instance.alertsActiveZone(zoneId, {})).resolves.toStrictEqual(null)
  // })
  // test("alertsQuery", () => {
  //   const active: boolean = true
  //   const start: Date = 2013-10-20T19:20:30+01:00
  //   const end: Date = 2013-10-20T19:20:30+01:00
  //   const status: Array<string> = undefined
  //   const messageType: Array<string> = undefined
  //   const event: Array<string> = undefined
  //   const code: Array<string> = undefined
  //   const area: Array<api.AreaCode> = undefined
  //   const point: PointString = undefined
  //   const region: Array<MarineRegionCode> = undefined
  //   const regionType: string = "regionType_example"
  //   const zone: Array<NWSZoneID> = undefined
  //   const urgency: Array<AlertUrgency> = undefined
  //   const severity: Array<AlertSeverity> = undefined
  //   const certainty: Array<AlertCertainty> = undefined
  //   const limit: number = 56
  //   const cursor: string = "cursor_example"
  //   return expect(instance.alertsQuery(active, start, end, status, messageType, event, code, area, point, region, regionType, zone, urgency, severity, certainty, limit, cursor, {})).resolves.toStrictEqual(null)
  // })
  // test("alertsSingle", () => {
  //   const id: AlertId = undefined
  //   return expect(instance.alertsSingle(id, {})).resolves.toStrictEqual(null)
  // })
  // test("alertsTypes", () => {
  //   return expect(instance.alertsTypes({})).resolves.toStrictEqual(null)
  // })
  // test("glossary", () => {
  //   return expect(instance.glossary({})).resolves.toStrictEqual(null)
  // })
  // test("gridpoint", () => {
  //   const wfo: NWSForecastOfficeId = undefined
  //   const x: number = 56
  //   const y: number = 56
  //   return expect(instance.gridpoint(wfo, x, y, {})).resolves.toStrictEqual(null)
  // })
  test("gridpointForecast", () => {
    const wfo: NWSForecastOfficeId = NWSForecastOfficeId.LWX;
    const x: number = 96;
    const y: number = 70;
    return expect(
      instance.gridpointForecast(wfo, x, y, undefined, undefined, {})
    ).resolves.toStrictEqual({
      "@context": [
        "https://geojson.org/geojson-ld/geojson-context.jsonld",
        {
          "@version": "1.1",
          wx: "https://api.weather.gov/ontology#",
          geo: "http://www.opengis.net/ont/geosparql#",
          unit: "http://codes.wmo.int/common/unit/",
          "@vocab": "https://api.weather.gov/ontology#",
        },
      ],
      type: "Feature",
      geometry: {
        type: "Polygon",
        coordinates: [
          [
            [-77.036996200000004, 38.900789000000003],
            [-77.040754800000002, 38.878836500000006],
            [-77.012551900000005, 38.875908600000002],
            [-77.008787600000005, 38.897860800000004],
            [-77.036996200000004, 38.900789000000003],
          ],
        ],
      },
      properties: {
        updated: expect.stringMatching(timestampRegex),
        units: "us",
        forecastGenerator: "BaselineForecastGenerator",
        generatedAt: expect.stringMatching(timestampRegex),
        updateTime: expect.stringMatching(timestampRegex),
        validTimes: expect.stringMatching(ISO8601IntervalISO8601IntervalRegex),
        elevation: {
          unitCode: "wmoUnit:m",
          value: expect.any(Number),
        },
        periods: expect.arrayContaining([
          expect.objectContaining({
            number: expect.any(Number),
            name: expect.any(String),
            startTime: expect.stringMatching(timestampRegex),
            endTime: expect.stringMatching(timestampRegex),
            isDaytime: expect.any(Boolean),
            temperature: expect.any(Number),
            temperatureUnit: "F",
            temperatureTrend: expect.any(Object),
            windSpeed: expect.any(String),
            windDirection: expect.any(String),
            icon: expect.any(String),
            shortForecast: expect.any(String),
            detailedForecast: expect.any(String),
          }),
        ]),
      },
    });
  });
  // test("gridpointForecastHourly", () => {
  //   const wfo: NWSForecastOfficeId = undefined
  //   const x: number = 56
  //   const y: number = 56
  //   const featureFlags: Array<string> = undefined
  //   const units: GridpointForecastUnits = undefined
  //   return expect(instance.gridpointForecastHourly(wfo, x, y, featureFlags, units, {})).resolves.toStrictEqual(null)
  // })
  // test("gridpointStations", () => {
  //   const wfo: NWSForecastOfficeId = undefined
  //   const x: number = 56
  //   const y: number = 56
  //   return expect(instance.gridpointStations(wfo, x, y, {})).resolves.toStrictEqual(null)
  // })
  // test("icons", () => {
  //   const set: string = "set_example"
  //   const timeOfDay: string = "timeOfDay_example"
  //   const first: string = "first_example"
  //   const size: api.Size = undefined
  //   const fontsize: number = 56
  //   return expect(instance.icons(set, timeOfDay, first, size, fontsize, {})).resolves.toStrictEqual(null)
  // })
  // test("iconsDualCondition", () => {
  //   const set: string = "set_example"
  //   const timeOfDay: string = "timeOfDay_example"
  //   const first: string = "first_example"
  //   const second: string = "second_example"
  //   const size: api.Size1 = undefined
  //   const fontsize: number = 56
  //   return expect(instance.iconsDualCondition(set, timeOfDay, first, second, size, fontsize, {})).resolves.toStrictEqual(null)
  // })
  // test("iconsSummary", () => {
  //   return expect(instance.iconsSummary({})).resolves.toStrictEqual(null)
  // })
  // test("locationProducts", () => {
  //   const locationId: string = "locationId_example"
  //   return expect(instance.locationProducts(locationId, {})).resolves.toStrictEqual(null)
  // })
  // test("obsStation", () => {
  //   const stationId: string = "stationId_example"
  //   return expect(instance.obsStation(stationId, {})).resolves.toStrictEqual(null)
  // })
  // test("obsStations", () => {
  //   const id: Array<string> = undefined
  //   const state: Array<api.AreaCode> = undefined
  //   const limit: number = 56
  //   return expect(instance.obsStations(id, state, limit, {})).resolves.toStrictEqual(null)
  // })
  // test("office", () => {
  //   const officeId: NWSForecastOfficeId = undefined
  //   return expect(instance.office(officeId, {})).resolves.toStrictEqual(null)
  // })
  // test("officeHeadline", () => {
  //   const officeId: NWSForecastOfficeId = undefined
  //   const headlineId: string = "headlineId_example"
  //   return expect(instance.officeHeadline(officeId, headlineId, {})).resolves.toStrictEqual(null)
  // })
  // test("officeHeadlines", () => {
  //   const officeId: NWSForecastOfficeId = undefined
  //   return expect(instance.officeHeadlines(officeId, {})).resolves.toStrictEqual(null)
  // })
  test("point", () => {
    const point: PointString = "38.8894,-77.0352";
    return expect(instance.point(point, {})).resolves.toStrictEqual({
      "@context": expect.any(Array),
      id: "https://api.weather.gov/points/38.8894,-77.0352",
      type: "Feature",
      geometry: {
        type: "Point",
        coordinates: [-77.035200000000003, 38.889400000000002],
      },
      properties: {
        "@id": "https://api.weather.gov/points/38.8894,-77.0352",
        "@type": "wx:Point",
        cwa: "LWX",
        forecastOffice: "https://api.weather.gov/offices/LWX",
        gridId: "LWX",
        gridX: 97,
        gridY: 71,
        forecast: "https://api.weather.gov/gridpoints/LWX/97,71/forecast",
        forecastHourly:
          "https://api.weather.gov/gridpoints/LWX/97,71/forecast/hourly",
        forecastGridData: "https://api.weather.gov/gridpoints/LWX/97,71",
        observationStations:
          "https://api.weather.gov/gridpoints/LWX/97,71/stations",
        relativeLocation: {
          type: "Feature",
          geometry: {
            type: "Point",
            coordinates: [-77.017229, 38.904102999999999],
          },
          properties: {
            city: "Washington",
            state: "DC",
            distance: {
              unitCode: "wmoUnit:m",
              value: expect.any(Number),
            },
            bearing: {
              unitCode: "wmoUnit:degree_(angle)",
              value: expect.any(Number),
            },
          },
        },
        forecastZone: "https://api.weather.gov/zones/forecast/DCZ001",
        county: "https://api.weather.gov/zones/county/DCC001",
        fireWeatherZone: "https://api.weather.gov/zones/fire/DCZ001",
        timeZone: "America/New_York",
        radarStation: "KLWX",
      },
    });
  });
  // test("pointStations", () => {
  //   const point: PointString = undefined
  //   return expect(instance.pointStations(point, {})).resolves.toStrictEqual(null)
  // })
  // test("product", () => {
  //   const productId: string = "productId_example"
  //   return expect(instance.product(productId, {})).resolves.toStrictEqual(null)
  // })
  // test("productLocations", () => {
  //   return expect(instance.productLocations({})).resolves.toStrictEqual(null)
  // })
  // test("productTypes", () => {
  //   return expect(instance.productTypes({})).resolves.toStrictEqual(null)
  // })
  // test("productsQuery", () => {
  //   const location: Array<string> = undefined
  //   const start: string = "2013-10-20T19:20:30+01:00"
  //   const end: string = "2013-10-20T19:20:30+01:00"
  //   const office: Array<string> = undefined
  //   const wmoid: Array<string> = undefined
  //   const type: Array<string> = undefined
  //   const limit: number = 56
  //   return expect(instance.productsQuery(location, start, end, office, wmoid, type, limit, {})).resolves.toStrictEqual(null)
  // })
  // test("productsType", () => {
  //   const typeId: string = "typeId_example"
  //   return expect(instance.productsType(typeId, {})).resolves.toStrictEqual(null)
  // })
  // test("productsTypeLocation", () => {
  //   const typeId: string = "typeId_example"
  //   const locationId: string = "locationId_example"
  //   return expect(instance.productsTypeLocation(typeId, locationId, {})).resolves.toStrictEqual(null)
  // })
  // test("productsTypeLocations", () => {
  //   const typeId: string = "typeId_example"
  //   return expect(instance.productsTypeLocations(typeId, {})).resolves.toStrictEqual(null)
  // })
  // test("radarProfiler", () => {
  //   const stationId: string = "stationId_example"
  //   const time: api.ISO8601Interval = undefined
  //   const interval: ISO8601Duration = undefined
  //   return expect(instance.radarProfiler(stationId, time, interval, {})).resolves.toStrictEqual(null)
  // })
  // test("radarQueue", () => {
  //   const host: string = "host_example"
  //   const limit: number = 56
  //   const arrived: api.ISO8601Interval = undefined
  //   const created: api.ISO8601Interval = undefined
  //   const published: api.ISO8601Interval = undefined
  //   const station: string = "station_example"
  //   const type: string = "type_example"
  //   const feed: string = "feed_example"
  //   const resolution: number = 56
  //   return expect(instance.radarQueue(host, limit, arrived, created, published, station, type, feed, resolution, {})).resolves.toStrictEqual(null)
  // })
  // test("radarServer", () => {
  //   const id: string = "id_example"
  //   const reportingHost: string = "reportingHost_example"
  //   return expect(instance.radarServer(id, reportingHost, {})).resolves.toStrictEqual(null)
  // })
  // test("radarServers", () => {
  //   const reportingHost: string = "reportingHost_example"
  //   return expect(instance.radarServers(reportingHost, {})).resolves.toStrictEqual(null)
  // })
  // test("radarStation", () => {
  //   const stationId: string = "stationId_example"
  //   const reportingHost: string = "reportingHost_example"
  //   const host: string = "host_example"
  //   return expect(instance.radarStation(stationId, reportingHost, host, {})).resolves.toStrictEqual(null)
  // })
  // test("radarStationAlarms", () => {
  //   const stationId: string = "stationId_example"
  //   return expect(instance.radarStationAlarms(stationId, {})).resolves.toStrictEqual(null)
  // })
  // test("radarStations", () => {
  //   const stationType: Array<string> = undefined
  //   const reportingHost: string = "reportingHost_example"
  //   const host: string = "host_example"
  //   return expect(instance.radarStations(stationType, reportingHost, host, {})).resolves.toStrictEqual(null)
  // })
  // test("satelliteThumbnails", () => {
  //   const area: string = "area_example"
  //   return expect(instance.satelliteThumbnails(area, {})).resolves.toStrictEqual(null)
  // })
  // test("stationObservationLatest", () => {
  //   const stationId: string = "stationId_example"
  //   const requireQc: boolean = true
  //   return expect(instance.stationObservationLatest(stationId, requireQc, {})).resolves.toStrictEqual(null)
  // })
  // test("stationObservationList", () => {
  //   const stationId: string = "stationId_example"
  //   const start: Date = 2013-10-20T19:20:30+01:00
  //   const end: Date = 2013-10-20T19:20:30+01:00
  //   const limit: number = 56
  //   return expect(instance.stationObservationList(stationId, start, end, limit, {})).resolves.toStrictEqual(null)
  // })
  // test("stationObservationTime", () => {
  //   const stationId: string = "stationId_example"
  //   const time: Date = 2013-10-20T19:20:30+01:00
  //   return expect(instance.stationObservationTime(stationId, time, {})).resolves.toStrictEqual(null)
  // })
  // test("zone", () => {
  //   const type: string = "type_example"
  //   const zoneId: NWSZoneID = undefined
  //   const effective: Date = 2013-10-20T19:20:30+01:00
  //   return expect(instance.zone(type, zoneId, effective, {})).resolves.toStrictEqual(null)
  // })
  // test("zoneForecast", () => {
  //   const type: string = "type_example"
  //   const zoneId: NWSZoneID = undefined
  //   return expect(instance.zoneForecast(type, zoneId, {})).resolves.toStrictEqual(null)
  // })
  // test("zoneList", () => {
  //   const id: Array<NWSZoneID> = undefined
  //   const area: Array<api.AreaCode> = undefined
  //   const region: Array<api.RegionCode> = undefined
  //   const type: Array<string> = undefined
  //   const point: PointString = undefined
  //   const includeGeometry: boolean = true
  //   const limit: number = 56
  //   const effective: Date = 2013-10-20T19:20:30+01:00
  //   return expect(instance.zoneList(id, area, region, type, point, includeGeometry, limit, effective, {})).resolves.toStrictEqual(null)
  // })
  // test("zoneListType", () => {
  //   const type: string = "type_example"
  //   const id: Array<NWSZoneID> = undefined
  //   const area: Array<api.AreaCode> = undefined
  //   const region: Array<api.RegionCode> = undefined
  //   const type: Array<string> = undefined
  //   const point: PointString = undefined
  //   const includeGeometry: boolean = true
  //   const limit: number = 56
  //   const effective: Date = 2013-10-20T19:20:30+01:00
  //   return expect(instance.zoneListType(type, id, area, region, type, point, includeGeometry, limit, effective, {})).resolves.toStrictEqual(null)
  // })
  // test("zoneObs", () => {
  //   const zoneId: NWSZoneID = undefined
  //   const start: Date = 2013-10-20T19:20:30+01:00
  //   const end: Date = 2013-10-20T19:20:30+01:00
  //   const limit: number = 56
  //   return expect(instance.zoneObs(zoneId, start, end, limit, {})).resolves.toStrictEqual(null)
  // })
  // test("zoneStations", () => {
  //   const zoneId: NWSZoneID = undefined
  //   return expect(instance.zoneStations(zoneId, {})).resolves.toStrictEqual(null)
  // })
});
