/**
 * weather.gov API
 * weather.gov API
 *
 * OpenAPI spec version: 1.8.5
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("alertsActive", () => {
    const status: Array<string> = undefined
    const messageType: Array<string> = undefined
    const event: Array<string> = undefined
    const code: Array<string> = undefined
    const area: Array<api.AreaCode> = undefined
    const point: PointString = undefined
    const region: Array<MarineRegionCode> = undefined
    const regionType: string = "regionType_example"
    const zone: Array<NWSZoneID> = undefined
    const urgency: Array<AlertUrgency> = undefined
    const severity: Array<AlertSeverity> = undefined
    const certainty: Array<AlertCertainty> = undefined
    const limit: number = 56
    return expect(instance.alertsActive(status, messageType, event, code, area, point, region, regionType, zone, urgency, severity, certainty, limit, {})).resolves.toBe(null)
  })
  test("alertsActiveArea", () => {
    const area: api.AreaCode = undefined
    return expect(instance.alertsActiveArea(area, {})).resolves.toBe(null)
  })
  test("alertsActiveCount", () => {
    return expect(instance.alertsActiveCount({})).resolves.toBe(null)
  })
  test("alertsActiveRegion", () => {
    const region: MarineRegionCode = undefined
    return expect(instance.alertsActiveRegion(region, {})).resolves.toBe(null)
  })
  test("alertsActiveZone", () => {
    const zoneId: NWSZoneID = undefined
    return expect(instance.alertsActiveZone(zoneId, {})).resolves.toBe(null)
  })
  test("alertsQuery", () => {
    const active: boolean = true
    const start: Date = 2013-10-20T19:20:30+01:00
    const end: Date = 2013-10-20T19:20:30+01:00
    const status: Array<string> = undefined
    const messageType: Array<string> = undefined
    const event: Array<string> = undefined
    const code: Array<string> = undefined
    const area: Array<api.AreaCode> = undefined
    const point: PointString = undefined
    const region: Array<MarineRegionCode> = undefined
    const regionType: string = "regionType_example"
    const zone: Array<NWSZoneID> = undefined
    const urgency: Array<AlertUrgency> = undefined
    const severity: Array<AlertSeverity> = undefined
    const certainty: Array<AlertCertainty> = undefined
    const limit: number = 56
    const cursor: string = "cursor_example"
    return expect(instance.alertsQuery(active, start, end, status, messageType, event, code, area, point, region, regionType, zone, urgency, severity, certainty, limit, cursor, {})).resolves.toBe(null)
  })
  test("alertsSingle", () => {
    const id: AlertId = undefined
    return expect(instance.alertsSingle(id, {})).resolves.toBe(null)
  })
  test("alertsTypes", () => {
    return expect(instance.alertsTypes({})).resolves.toBe(null)
  })
  test("glossary", () => {
    return expect(instance.glossary({})).resolves.toBe(null)
  })
  test("gridpoint", () => {
    const wfo: NWSForecastOfficeId = undefined
    const x: number = 56
    const y: number = 56
    return expect(instance.gridpoint(wfo, x, y, {})).resolves.toBe(null)
  })
  test("gridpointForecast", () => {
    const wfo: NWSForecastOfficeId = undefined
    const x: number = 56
    const y: number = 56
    const featureFlags: Array<string> = undefined
    const units: GridpointForecastUnits = undefined
    return expect(instance.gridpointForecast(wfo, x, y, featureFlags, units, {})).resolves.toBe(null)
  })
  test("gridpointForecastHourly", () => {
    const wfo: NWSForecastOfficeId = undefined
    const x: number = 56
    const y: number = 56
    const featureFlags: Array<string> = undefined
    const units: GridpointForecastUnits = undefined
    return expect(instance.gridpointForecastHourly(wfo, x, y, featureFlags, units, {})).resolves.toBe(null)
  })
  test("gridpointStations", () => {
    const wfo: NWSForecastOfficeId = undefined
    const x: number = 56
    const y: number = 56
    return expect(instance.gridpointStations(wfo, x, y, {})).resolves.toBe(null)
  })
  test("icons", () => {
    const set: string = "set_example"
    const timeOfDay: string = "timeOfDay_example"
    const first: string = "first_example"
    const size: api.Size = undefined
    const fontsize: number = 56
    return expect(instance.icons(set, timeOfDay, first, size, fontsize, {})).resolves.toBe(null)
  })
  test("iconsDualCondition", () => {
    const set: string = "set_example"
    const timeOfDay: string = "timeOfDay_example"
    const first: string = "first_example"
    const second: string = "second_example"
    const size: api.Size1 = undefined
    const fontsize: number = 56
    return expect(instance.iconsDualCondition(set, timeOfDay, first, second, size, fontsize, {})).resolves.toBe(null)
  })
  test("iconsSummary", () => {
    return expect(instance.iconsSummary({})).resolves.toBe(null)
  })
  test("locationProducts", () => {
    const locationId: string = "locationId_example"
    return expect(instance.locationProducts(locationId, {})).resolves.toBe(null)
  })
  test("obsStation", () => {
    const stationId: string = "stationId_example"
    return expect(instance.obsStation(stationId, {})).resolves.toBe(null)
  })
  test("obsStations", () => {
    const id: Array<string> = undefined
    const state: Array<api.AreaCode> = undefined
    const limit: number = 56
    return expect(instance.obsStations(id, state, limit, {})).resolves.toBe(null)
  })
  test("office", () => {
    const officeId: NWSForecastOfficeId = undefined
    return expect(instance.office(officeId, {})).resolves.toBe(null)
  })
  test("officeHeadline", () => {
    const officeId: NWSForecastOfficeId = undefined
    const headlineId: string = "headlineId_example"
    return expect(instance.officeHeadline(officeId, headlineId, {})).resolves.toBe(null)
  })
  test("officeHeadlines", () => {
    const officeId: NWSForecastOfficeId = undefined
    return expect(instance.officeHeadlines(officeId, {})).resolves.toBe(null)
  })
  test("point", () => {
    const point: PointString = undefined
    return expect(instance.point(point, {})).resolves.toBe(null)
  })
  test("pointStations", () => {
    const point: PointString = undefined
    return expect(instance.pointStations(point, {})).resolves.toBe(null)
  })
  test("product", () => {
    const productId: string = "productId_example"
    return expect(instance.product(productId, {})).resolves.toBe(null)
  })
  test("productLocations", () => {
    return expect(instance.productLocations({})).resolves.toBe(null)
  })
  test("productTypes", () => {
    return expect(instance.productTypes({})).resolves.toBe(null)
  })
  test("productsQuery", () => {
    const location: Array<string> = undefined
    const start: Date = 2013-10-20T19:20:30+01:00
    const end: Date = 2013-10-20T19:20:30+01:00
    const office: Array<string> = undefined
    const wmoid: Array<string> = undefined
    const type: Array<string> = undefined
    const limit: number = 56
    return expect(instance.productsQuery(location, start, end, office, wmoid, type, limit, {})).resolves.toBe(null)
  })
  test("productsType", () => {
    const typeId: string = "typeId_example"
    return expect(instance.productsType(typeId, {})).resolves.toBe(null)
  })
  test("productsTypeLocation", () => {
    const typeId: string = "typeId_example"
    const locationId: string = "locationId_example"
    return expect(instance.productsTypeLocation(typeId, locationId, {})).resolves.toBe(null)
  })
  test("productsTypeLocations", () => {
    const typeId: string = "typeId_example"
    return expect(instance.productsTypeLocations(typeId, {})).resolves.toBe(null)
  })
  test("radarProfiler", () => {
    const stationId: string = "stationId_example"
    const time: api.ISO8601Interval = undefined
    const interval: ISO8601Duration = undefined
    return expect(instance.radarProfiler(stationId, time, interval, {})).resolves.toBe(null)
  })
  test("radarQueue", () => {
    const host: string = "host_example"
    const limit: number = 56
    const arrived: api.ISO8601Interval = undefined
    const created: api.ISO8601Interval = undefined
    const published: api.ISO8601Interval = undefined
    const station: string = "station_example"
    const type: string = "type_example"
    const feed: string = "feed_example"
    const resolution: number = 56
    return expect(instance.radarQueue(host, limit, arrived, created, published, station, type, feed, resolution, {})).resolves.toBe(null)
  })
  test("radarServer", () => {
    const id: string = "id_example"
    const reportingHost: string = "reportingHost_example"
    return expect(instance.radarServer(id, reportingHost, {})).resolves.toBe(null)
  })
  test("radarServers", () => {
    const reportingHost: string = "reportingHost_example"
    return expect(instance.radarServers(reportingHost, {})).resolves.toBe(null)
  })
  test("radarStation", () => {
    const stationId: string = "stationId_example"
    const reportingHost: string = "reportingHost_example"
    const host: string = "host_example"
    return expect(instance.radarStation(stationId, reportingHost, host, {})).resolves.toBe(null)
  })
  test("radarStationAlarms", () => {
    const stationId: string = "stationId_example"
    return expect(instance.radarStationAlarms(stationId, {})).resolves.toBe(null)
  })
  test("radarStations", () => {
    const stationType: Array<string> = undefined
    const reportingHost: string = "reportingHost_example"
    const host: string = "host_example"
    return expect(instance.radarStations(stationType, reportingHost, host, {})).resolves.toBe(null)
  })
  test("satelliteThumbnails", () => {
    const area: string = "area_example"
    return expect(instance.satelliteThumbnails(area, {})).resolves.toBe(null)
  })
  test("stationObservationLatest", () => {
    const stationId: string = "stationId_example"
    const requireQc: boolean = true
    return expect(instance.stationObservationLatest(stationId, requireQc, {})).resolves.toBe(null)
  })
  test("stationObservationList", () => {
    const stationId: string = "stationId_example"
    const start: Date = 2013-10-20T19:20:30+01:00
    const end: Date = 2013-10-20T19:20:30+01:00
    const limit: number = 56
    return expect(instance.stationObservationList(stationId, start, end, limit, {})).resolves.toBe(null)
  })
  test("stationObservationTime", () => {
    const stationId: string = "stationId_example"
    const time: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.stationObservationTime(stationId, time, {})).resolves.toBe(null)
  })
  test("zone", () => {
    const type: string = "type_example"
    const zoneId: NWSZoneID = undefined
    const effective: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.zone(type, zoneId, effective, {})).resolves.toBe(null)
  })
  test("zoneForecast", () => {
    const type: string = "type_example"
    const zoneId: NWSZoneID = undefined
    return expect(instance.zoneForecast(type, zoneId, {})).resolves.toBe(null)
  })
  test("zoneList", () => {
    const id: Array<NWSZoneID> = undefined
    const area: Array<api.AreaCode> = undefined
    const region: Array<api.RegionCode> = undefined
    const type: Array<string> = undefined
    const point: PointString = undefined
    const includeGeometry: boolean = true
    const limit: number = 56
    const effective: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.zoneList(id, area, region, type, point, includeGeometry, limit, effective, {})).resolves.toBe(null)
  })
  test("zoneListType", () => {
    const type: string = "type_example"
    const id: Array<NWSZoneID> = undefined
    const area: Array<api.AreaCode> = undefined
    const region: Array<api.RegionCode> = undefined
    const type: Array<string> = undefined
    const point: PointString = undefined
    const includeGeometry: boolean = true
    const limit: number = 56
    const effective: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.zoneListType(type, id, area, region, type, point, includeGeometry, limit, effective, {})).resolves.toBe(null)
  })
  test("zoneObs", () => {
    const zoneId: NWSZoneID = undefined
    const start: Date = 2013-10-20T19:20:30+01:00
    const end: Date = 2013-10-20T19:20:30+01:00
    const limit: number = 56
    return expect(instance.zoneObs(zoneId, start, end, limit, {})).resolves.toBe(null)
  })
  test("zoneStations", () => {
    const zoneId: NWSZoneID = undefined
    return expect(instance.zoneStations(zoneId, {})).resolves.toBe(null)
  })
})

